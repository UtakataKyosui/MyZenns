name: Zenn Article Review

on:
  push:
    paths:
      - "articles/*.md"  # Zenn 用の md ファイルがあるパス

permissions:
  contents: read    # リポジトリの内容を読み取る
  issues: write    # Issue の作成・編集を許可

jobs:
  gpt-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get changed markdown files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: articles/*.md

      - name: Review each markdown file with ChatGPT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          BASE_URL="https://api.openai.com/v1/chat/completions"
          HEADERS=(
            -H "Content-Type: application/json"
            -H "Authorization: Bearer $OPENAI_API_KEY"
          )

          ISSUE_TITLE="📖 Zenn Articles Review Report"
          ISSUE_BODY="## Zenn 技術記事のレビュー\n\n### 改善点:\n"

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Reviewing $file..."

            CONTENT=$(cat "$file" | head -c 50000)
            PROMPT="以下の Markdown で記述された技術記事をレビューし、どのように修正すればいいか指摘してください。\n\n\`\`\`markdown\n$CONTENT\n\`\`\`\n\n特に以下の点に注意してください:\n- 誤字脱字や文法ミスを指摘すること\n- 読者が初心者から中級者であることを想定して、専門用語の説明を含めること\n- 視覚的に分かりやすい図やイラストを追加する提案をすること\n- 重要なポイントを強調し、要点をまとめること\n- 個人的な見解や感想は、客観的事実と異なると分かるようにすること"

            PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{
              model: "gpt-4o-mini",
              messages: [
                {role: "system", content: "あなたは技術記事のレビューアーです。"},
                {role: "user", content: $prompt}
              ],
              temperature: 0.5
            }')

            RESPONSE=$(curl -s -X POST "$BASE_URL" "${HEADERS[@]}" -d "$PAYLOAD")

            if [ -z "$RESPONSE" ]; then
              echo "Error: No response from OpenAI API" >&2
              exit 1
            fi

            REVIEW_TEXT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
            ISSUE_BODY+="### 📄 $file\n$REVIEW_TEXT\n\n---\n"
          done

          echo "$ISSUE_BODY" > issue_body.md

          # Check if an existing issue exists
          EXISTING_ISSUE=$(gh issue list --repo $GITHUB_REPOSITORY --state=open --search "$ISSUE_TITLE" --json number --jq '.[0].number')

          if [ -n "$EXISTING_ISSUE" ]; then
            echo "Updating existing issue #$EXISTING_ISSUE"
            gh issue edit "$EXISTING_ISSUE" --body "$ISSUE_BODY"
          else
            echo "Creating a new issue"
            gh issue create --title "$ISSUE_TITLE" --body "$ISSUE_BODY"
          fi
